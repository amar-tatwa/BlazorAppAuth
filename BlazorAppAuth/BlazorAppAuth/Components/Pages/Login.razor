@page "/login"
@using BlazorAppAuth.Client.Models
@*
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveAuto *@
@* @rendermode InteractiveWebAssembly *@

<h3>Login</h3>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}


<div class="rz-p-0 rz-p-md-12">
    <RadzenTemplateForm TItem="TokenRequest" Data=@model>
        <RadzenStack Gap="1rem" class="rz-p-sm-12">
            <RadzenFormField Text="User Name" Variant="@variant">
                <ChildContent>
                    <RadzenTextBox Name="UserName" @bind-Value=@model.user_name />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="UserName" Text="First name is required." />
                </Helper>
            </RadzenFormField>
            <RadzenFormField Text="Password" Variant="@variant">
                <ChildContent>
                    <RadzenTextBox Name="Password" @bind-Value=@model.password />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="LastName" Text="Last name is required." />
                </Helper>
            </RadzenFormField>
            <RadzenButton ButtonType="ButtonType.Button" Text="Submit" onclick="OnSubmit"></RadzenButton>
        </RadzenStack>
    </RadzenTemplateForm>

  @*   <EditForm Model="@model" FormName="login-data" OnValidSubmit="@OnSubmit" style="width: 200px;">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>User Name:</label>
            <InputText @bind-Value="model.user_name" class="form-control" />
            <ValidationMessage For="@(() => model.user_name)" />
        </div>

        <div class="form-group">
            <label>Password:</label>
            <InputText @bind-Value="model.password" type="password" class="form-control" />
            <ValidationMessage For="@(() => model.password)" />
        </div>

        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm> *@
</div>

@code {


    // [CascadingParameter]
    // private HttpContext HttpContext { get; set; } = default!;

    Variant variant = Variant.Outlined;

    TokenRequest model = new TokenRequest();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
       
    }
    async Task OnSubmit(TokenRequest model)
    {
        // if (model.user_name == "aa" && model.password == "ss")
        // {
        //     var claims = new List<Claim>
        //                      {
        //                          new Claim(ClaimTypes.Name, "Demo"),
        //                          new Claim(ClaimTypes.NameIdentifier, "123456789"),
        //                          new Claim(ClaimTypes.Email, "ajjj@gmail.com"),
        //                      };

        //     // var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

        //     // await HttpContext.SignInAsync(
        //     //     CookieAuthenticationDefaults.AuthenticationScheme,
        //     //     new ClaimsPrincipal(claimsIdentity));


        //     Navigation.NavigateTo("/", true);
        // }
        // else
        // {
        //     errorMessage = "Invalid login attempt.";
            
        // }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        // console.Log($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() {  WriteIndented = true })}");
    }
}